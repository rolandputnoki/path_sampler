# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from path_sampler/Scene.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import path_sampler.msg

class Scene(genpy.Message):
  _md5sum = "dd906ce2d92bdeca980b67425fdd61f5"
  _type = "path_sampler/Scene"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Robot robot
Environment environment
Config start
Config goal

================================================================================
MSG: path_sampler/Robot
float64 minimumRadius
float64 wheelbase
Polygon body



================================================================================
MSG: path_sampler/Polygon
Point[] points


================================================================================
MSG: path_sampler/Point
float64 x
float64 y


================================================================================
MSG: path_sampler/Environment
Polygon[] obstacles
Field field

================================================================================
MSG: path_sampler/Field
float64 width
float64 height


================================================================================
MSG: path_sampler/Config
float64 x
float64 y
float64 phi

"""
  __slots__ = ['robot','environment','start','goal']
  _slot_types = ['path_sampler/Robot','path_sampler/Environment','path_sampler/Config','path_sampler/Config']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot,environment,start,goal

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Scene, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.robot is None:
        self.robot = path_sampler.msg.Robot()
      if self.environment is None:
        self.environment = path_sampler.msg.Environment()
      if self.start is None:
        self.start = path_sampler.msg.Config()
      if self.goal is None:
        self.goal = path_sampler.msg.Config()
    else:
      self.robot = path_sampler.msg.Robot()
      self.environment = path_sampler.msg.Environment()
      self.start = path_sampler.msg.Config()
      self.goal = path_sampler.msg.Config()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2d().pack(_x.robot.minimumRadius, _x.robot.wheelbase))
      length = len(self.robot.body.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot.body.points:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.environment.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.environment.obstacles:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_8d().pack(_x.environment.field.width, _x.environment.field.height, _x.start.x, _x.start.y, _x.start.phi, _x.goal.x, _x.goal.y, _x.goal.phi))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.robot is None:
        self.robot = path_sampler.msg.Robot()
      if self.environment is None:
        self.environment = path_sampler.msg.Environment()
      if self.start is None:
        self.start = path_sampler.msg.Config()
      if self.goal is None:
        self.goal = path_sampler.msg.Config()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.robot.minimumRadius, _x.robot.wheelbase,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot.body.points = []
      for i in range(0, length):
        val1 = path_sampler.msg.Point()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        self.robot.body.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.environment.obstacles = []
      for i in range(0, length):
        val1 = path_sampler.msg.Polygon()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = path_sampler.msg.Point()
          _x = val2
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          val1.points.append(val2)
        self.environment.obstacles.append(val1)
      _x = self
      start = end
      end += 64
      (_x.environment.field.width, _x.environment.field.height, _x.start.x, _x.start.y, _x.start.phi, _x.goal.x, _x.goal.y, _x.goal.phi,) = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2d().pack(_x.robot.minimumRadius, _x.robot.wheelbase))
      length = len(self.robot.body.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot.body.points:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.environment.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.environment.obstacles:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_8d().pack(_x.environment.field.width, _x.environment.field.height, _x.start.x, _x.start.y, _x.start.phi, _x.goal.x, _x.goal.y, _x.goal.phi))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.robot is None:
        self.robot = path_sampler.msg.Robot()
      if self.environment is None:
        self.environment = path_sampler.msg.Environment()
      if self.start is None:
        self.start = path_sampler.msg.Config()
      if self.goal is None:
        self.goal = path_sampler.msg.Config()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.robot.minimumRadius, _x.robot.wheelbase,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot.body.points = []
      for i in range(0, length):
        val1 = path_sampler.msg.Point()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        self.robot.body.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.environment.obstacles = []
      for i in range(0, length):
        val1 = path_sampler.msg.Polygon()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = path_sampler.msg.Point()
          _x = val2
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          val1.points.append(val2)
        self.environment.obstacles.append(val1)
      _x = self
      start = end
      end += 64
      (_x.environment.field.width, _x.environment.field.height, _x.start.x, _x.start.y, _x.start.phi, _x.goal.x, _x.goal.y, _x.goal.phi,) = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
