# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from path_sampler/ConfigInterval.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import path_sampler.msg

class ConfigInterval(genpy.Message):
  _md5sum = "6c9b1aa4ea92907adaadbfb9e168e621"
  _type = "path_sampler/ConfigInterval"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Point start
Point end
Point center
float64 radius
float64 arc_start
float64 delta
bool direction
bool orientation
string configIntervalType  # TCI: szakasz, ACI: körív

================================================================================
MSG: path_sampler/Point
float64 x
float64 y

"""
  __slots__ = ['start','end','center','radius','arc_start','delta','direction','orientation','configIntervalType']
  _slot_types = ['path_sampler/Point','path_sampler/Point','path_sampler/Point','float64','float64','float64','bool','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start,end,center,radius,arc_start,delta,direction,orientation,configIntervalType

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ConfigInterval, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start is None:
        self.start = path_sampler.msg.Point()
      if self.end is None:
        self.end = path_sampler.msg.Point()
      if self.center is None:
        self.center = path_sampler.msg.Point()
      if self.radius is None:
        self.radius = 0.
      if self.arc_start is None:
        self.arc_start = 0.
      if self.delta is None:
        self.delta = 0.
      if self.direction is None:
        self.direction = False
      if self.orientation is None:
        self.orientation = False
      if self.configIntervalType is None:
        self.configIntervalType = ''
    else:
      self.start = path_sampler.msg.Point()
      self.end = path_sampler.msg.Point()
      self.center = path_sampler.msg.Point()
      self.radius = 0.
      self.arc_start = 0.
      self.delta = 0.
      self.direction = False
      self.orientation = False
      self.configIntervalType = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9d2B().pack(_x.start.x, _x.start.y, _x.end.x, _x.end.y, _x.center.x, _x.center.y, _x.radius, _x.arc_start, _x.delta, _x.direction, _x.orientation))
      _x = self.configIntervalType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.start is None:
        self.start = path_sampler.msg.Point()
      if self.end is None:
        self.end = path_sampler.msg.Point()
      if self.center is None:
        self.center = path_sampler.msg.Point()
      end = 0
      _x = self
      start = end
      end += 74
      (_x.start.x, _x.start.y, _x.end.x, _x.end.y, _x.center.x, _x.center.y, _x.radius, _x.arc_start, _x.delta, _x.direction, _x.orientation,) = _get_struct_9d2B().unpack(str[start:end])
      self.direction = bool(self.direction)
      self.orientation = bool(self.orientation)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.configIntervalType = str[start:end].decode('utf-8')
      else:
        self.configIntervalType = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9d2B().pack(_x.start.x, _x.start.y, _x.end.x, _x.end.y, _x.center.x, _x.center.y, _x.radius, _x.arc_start, _x.delta, _x.direction, _x.orientation))
      _x = self.configIntervalType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.start is None:
        self.start = path_sampler.msg.Point()
      if self.end is None:
        self.end = path_sampler.msg.Point()
      if self.center is None:
        self.center = path_sampler.msg.Point()
      end = 0
      _x = self
      start = end
      end += 74
      (_x.start.x, _x.start.y, _x.end.x, _x.end.y, _x.center.x, _x.center.y, _x.radius, _x.arc_start, _x.delta, _x.direction, _x.orientation,) = _get_struct_9d2B().unpack(str[start:end])
      self.direction = bool(self.direction)
      self.orientation = bool(self.orientation)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.configIntervalType = str[start:end].decode('utf-8')
      else:
        self.configIntervalType = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9d2B = None
def _get_struct_9d2B():
    global _struct_9d2B
    if _struct_9d2B is None:
        _struct_9d2B = struct.Struct("<9d2B")
    return _struct_9d2B
