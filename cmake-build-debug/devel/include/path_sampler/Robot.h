// Generated by gencpp from file path_sampler/Robot.msg
// DO NOT EDIT!


#ifndef PATH_SAMPLER_MESSAGE_ROBOT_H
#define PATH_SAMPLER_MESSAGE_ROBOT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <path_sampler/Polygon.h>

namespace path_sampler
{
template <class ContainerAllocator>
struct Robot_
{
  typedef Robot_<ContainerAllocator> Type;

  Robot_()
    : minimumRadius(0.0)
    , wheelbase(0.0)
    , body()  {
    }
  Robot_(const ContainerAllocator& _alloc)
    : minimumRadius(0.0)
    , wheelbase(0.0)
    , body(_alloc)  {
  (void)_alloc;
    }



   typedef double _minimumRadius_type;
  _minimumRadius_type minimumRadius;

   typedef double _wheelbase_type;
  _wheelbase_type wheelbase;

   typedef  ::path_sampler::Polygon_<ContainerAllocator>  _body_type;
  _body_type body;




  typedef boost::shared_ptr< ::path_sampler::Robot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_sampler::Robot_<ContainerAllocator> const> ConstPtr;

}; // struct Robot_

typedef ::path_sampler::Robot_<std::allocator<void> > Robot;

typedef boost::shared_ptr< ::path_sampler::Robot > RobotPtr;
typedef boost::shared_ptr< ::path_sampler::Robot const> RobotConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_sampler::Robot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_sampler::Robot_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_sampler

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'path_sampler': ['/home/osboxes/catkin_ws/src/path_sampler/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_sampler::Robot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_sampler::Robot_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_sampler::Robot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_sampler::Robot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_sampler::Robot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_sampler::Robot_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_sampler::Robot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5b2ac8eecc8f975569b4a77146d1fa2";
  }

  static const char* value(const ::path_sampler::Robot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5b2ac8eecc8f975ULL;
  static const uint64_t static_value2 = 0x569b4a77146d1fa2ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_sampler::Robot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_sampler/Robot";
  }

  static const char* value(const ::path_sampler::Robot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_sampler::Robot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 minimumRadius\n\
float64 wheelbase\n\
Polygon body\n\
\n\
\n\
\n\
================================================================================\n\
MSG: path_sampler/Polygon\n\
Point[] points\n\
\n\
\n\
================================================================================\n\
MSG: path_sampler/Point\n\
float64 x\n\
float64 y\n\
\n\
";
  }

  static const char* value(const ::path_sampler::Robot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_sampler::Robot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.minimumRadius);
      stream.next(m.wheelbase);
      stream.next(m.body);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Robot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_sampler::Robot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_sampler::Robot_<ContainerAllocator>& v)
  {
    s << indent << "minimumRadius: ";
    Printer<double>::stream(s, indent + "  ", v.minimumRadius);
    s << indent << "wheelbase: ";
    Printer<double>::stream(s, indent + "  ", v.wheelbase);
    s << indent << "body: ";
    s << std::endl;
    Printer< ::path_sampler::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.body);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_SAMPLER_MESSAGE_ROBOT_H
