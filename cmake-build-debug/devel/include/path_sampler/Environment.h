// Generated by gencpp from file path_sampler/Environment.msg
// DO NOT EDIT!


#ifndef PATH_SAMPLER_MESSAGE_ENVIRONMENT_H
#define PATH_SAMPLER_MESSAGE_ENVIRONMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <path_sampler/Polygon.h>
#include <path_sampler/Field.h>

namespace path_sampler
{
template <class ContainerAllocator>
struct Environment_
{
  typedef Environment_<ContainerAllocator> Type;

  Environment_()
    : obstacles()
    , field()  {
    }
  Environment_(const ContainerAllocator& _alloc)
    : obstacles(_alloc)
    , field(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::path_sampler::Polygon_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::path_sampler::Polygon_<ContainerAllocator> >::other >  _obstacles_type;
  _obstacles_type obstacles;

   typedef  ::path_sampler::Field_<ContainerAllocator>  _field_type;
  _field_type field;




  typedef boost::shared_ptr< ::path_sampler::Environment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_sampler::Environment_<ContainerAllocator> const> ConstPtr;

}; // struct Environment_

typedef ::path_sampler::Environment_<std::allocator<void> > Environment;

typedef boost::shared_ptr< ::path_sampler::Environment > EnvironmentPtr;
typedef boost::shared_ptr< ::path_sampler::Environment const> EnvironmentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_sampler::Environment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_sampler::Environment_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_sampler

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'path_sampler': ['/home/osboxes/catkin_ws/src/path_sampler/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_sampler::Environment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_sampler::Environment_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_sampler::Environment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_sampler::Environment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_sampler::Environment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_sampler::Environment_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_sampler::Environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3cc57c194042ef7c4a4244da00e50495";
  }

  static const char* value(const ::path_sampler::Environment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3cc57c194042ef7cULL;
  static const uint64_t static_value2 = 0x4a4244da00e50495ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_sampler::Environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_sampler/Environment";
  }

  static const char* value(const ::path_sampler::Environment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_sampler::Environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Polygon[] obstacles\n\
Field field\n\
\n\
================================================================================\n\
MSG: path_sampler/Polygon\n\
Point[] points\n\
\n\
\n\
================================================================================\n\
MSG: path_sampler/Point\n\
float64 x\n\
float64 y\n\
\n\
\n\
================================================================================\n\
MSG: path_sampler/Field\n\
float64 width\n\
float64 height\n\
\n\
";
  }

  static const char* value(const ::path_sampler::Environment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_sampler::Environment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obstacles);
      stream.next(m.field);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Environment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_sampler::Environment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_sampler::Environment_<ContainerAllocator>& v)
  {
    s << indent << "obstacles[]" << std::endl;
    for (size_t i = 0; i < v.obstacles.size(); ++i)
    {
      s << indent << "  obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::path_sampler::Polygon_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacles[i]);
    }
    s << indent << "field: ";
    s << std::endl;
    Printer< ::path_sampler::Field_<ContainerAllocator> >::stream(s, indent + "  ", v.field);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_SAMPLER_MESSAGE_ENVIRONMENT_H
