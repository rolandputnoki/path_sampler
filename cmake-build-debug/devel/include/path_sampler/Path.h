// Generated by gencpp from file path_sampler/Path.msg
// DO NOT EDIT!


#ifndef PATH_SAMPLER_MESSAGE_PATH_H
#define PATH_SAMPLER_MESSAGE_PATH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <path_sampler/ConfigInterval.h>

namespace path_sampler
{
template <class ContainerAllocator>
struct Path_
{
  typedef Path_<ContainerAllocator> Type;

  Path_()
    : segments()  {
    }
  Path_(const ContainerAllocator& _alloc)
    : segments(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::path_sampler::ConfigInterval_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::path_sampler::ConfigInterval_<ContainerAllocator> >::other >  _segments_type;
  _segments_type segments;




  typedef boost::shared_ptr< ::path_sampler::Path_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_sampler::Path_<ContainerAllocator> const> ConstPtr;

}; // struct Path_

typedef ::path_sampler::Path_<std::allocator<void> > Path;

typedef boost::shared_ptr< ::path_sampler::Path > PathPtr;
typedef boost::shared_ptr< ::path_sampler::Path const> PathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_sampler::Path_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_sampler::Path_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_sampler

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'path_sampler': ['/home/osboxes/catkin_ws/src/path_sampler/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_sampler::Path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_sampler::Path_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_sampler::Path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_sampler::Path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_sampler::Path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_sampler::Path_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_sampler::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e0da83884d8773075997c173656f81f7";
  }

  static const char* value(const ::path_sampler::Path_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe0da83884d877307ULL;
  static const uint64_t static_value2 = 0x5997c173656f81f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_sampler::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_sampler/Path";
  }

  static const char* value(const ::path_sampler::Path_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_sampler::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ConfigInterval[] segments\n\
\n\
================================================================================\n\
MSG: path_sampler/ConfigInterval\n\
Point start\n\
Point end\n\
Point center\n\
float64 radius\n\
float64 arc_start\n\
float64 delta\n\
bool direction\n\
bool orientation\n\
string configIntervalType  # TCI: szakasz, ACI: körív\n\
\n\
================================================================================\n\
MSG: path_sampler/Point\n\
float64 x\n\
float64 y\n\
\n\
";
  }

  static const char* value(const ::path_sampler::Path_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_sampler::Path_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.segments);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Path_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_sampler::Path_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_sampler::Path_<ContainerAllocator>& v)
  {
    s << indent << "segments[]" << std::endl;
    for (size_t i = 0; i < v.segments.size(); ++i)
    {
      s << indent << "  segments[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::path_sampler::ConfigInterval_<ContainerAllocator> >::stream(s, indent + "    ", v.segments[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_SAMPLER_MESSAGE_PATH_H
