// Generated by gencpp from file path_sampler/ConfigInterval.msg
// DO NOT EDIT!


#ifndef PATH_SAMPLER_MESSAGE_CONFIGINTERVAL_H
#define PATH_SAMPLER_MESSAGE_CONFIGINTERVAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <path_sampler/Point.h>
#include <path_sampler/Point.h>
#include <path_sampler/Point.h>

namespace path_sampler
{
template <class ContainerAllocator>
struct ConfigInterval_
{
  typedef ConfigInterval_<ContainerAllocator> Type;

  ConfigInterval_()
    : start()
    , end()
    , center()
    , radius(0.0)
    , arc_start(0.0)
    , delta(0.0)
    , direction(false)
    , orientation(false)
    , configIntervalType()  {
    }
  ConfigInterval_(const ContainerAllocator& _alloc)
    : start(_alloc)
    , end(_alloc)
    , center(_alloc)
    , radius(0.0)
    , arc_start(0.0)
    , delta(0.0)
    , direction(false)
    , orientation(false)
    , configIntervalType(_alloc)  {
  (void)_alloc;
    }



   typedef  ::path_sampler::Point_<ContainerAllocator>  _start_type;
  _start_type start;

   typedef  ::path_sampler::Point_<ContainerAllocator>  _end_type;
  _end_type end;

   typedef  ::path_sampler::Point_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef double _radius_type;
  _radius_type radius;

   typedef double _arc_start_type;
  _arc_start_type arc_start;

   typedef double _delta_type;
  _delta_type delta;

   typedef uint8_t _direction_type;
  _direction_type direction;

   typedef uint8_t _orientation_type;
  _orientation_type orientation;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _configIntervalType_type;
  _configIntervalType_type configIntervalType;




  typedef boost::shared_ptr< ::path_sampler::ConfigInterval_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_sampler::ConfigInterval_<ContainerAllocator> const> ConstPtr;

}; // struct ConfigInterval_

typedef ::path_sampler::ConfigInterval_<std::allocator<void> > ConfigInterval;

typedef boost::shared_ptr< ::path_sampler::ConfigInterval > ConfigIntervalPtr;
typedef boost::shared_ptr< ::path_sampler::ConfigInterval const> ConfigIntervalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_sampler::ConfigInterval_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_sampler::ConfigInterval_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_sampler

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'path_sampler': ['/home/osboxes/catkin_ws/src/path_sampler/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_sampler::ConfigInterval_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_sampler::ConfigInterval_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_sampler::ConfigInterval_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_sampler::ConfigInterval_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_sampler::ConfigInterval_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_sampler::ConfigInterval_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_sampler::ConfigInterval_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6c9b1aa4ea92907adaadbfb9e168e621";
  }

  static const char* value(const ::path_sampler::ConfigInterval_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6c9b1aa4ea92907aULL;
  static const uint64_t static_value2 = 0xdaadbfb9e168e621ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_sampler::ConfigInterval_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_sampler/ConfigInterval";
  }

  static const char* value(const ::path_sampler::ConfigInterval_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_sampler::ConfigInterval_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Point start\n\
Point end\n\
Point center\n\
float64 radius\n\
float64 arc_start\n\
float64 delta\n\
bool direction\n\
bool orientation\n\
string configIntervalType  # TCI: szakasz, ACI: körív\n\
\n\
================================================================================\n\
MSG: path_sampler/Point\n\
float64 x\n\
float64 y\n\
\n\
";
  }

  static const char* value(const ::path_sampler::ConfigInterval_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_sampler::ConfigInterval_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start);
      stream.next(m.end);
      stream.next(m.center);
      stream.next(m.radius);
      stream.next(m.arc_start);
      stream.next(m.delta);
      stream.next(m.direction);
      stream.next(m.orientation);
      stream.next(m.configIntervalType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ConfigInterval_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_sampler::ConfigInterval_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_sampler::ConfigInterval_<ContainerAllocator>& v)
  {
    s << indent << "start: ";
    s << std::endl;
    Printer< ::path_sampler::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.start);
    s << indent << "end: ";
    s << std::endl;
    Printer< ::path_sampler::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.end);
    s << indent << "center: ";
    s << std::endl;
    Printer< ::path_sampler::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "radius: ";
    Printer<double>::stream(s, indent + "  ", v.radius);
    s << indent << "arc_start: ";
    Printer<double>::stream(s, indent + "  ", v.arc_start);
    s << indent << "delta: ";
    Printer<double>::stream(s, indent + "  ", v.delta);
    s << indent << "direction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.direction);
    s << indent << "orientation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.orientation);
    s << indent << "configIntervalType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.configIntervalType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_SAMPLER_MESSAGE_CONFIGINTERVAL_H
